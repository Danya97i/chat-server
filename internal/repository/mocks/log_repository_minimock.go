// Code generated by http://github.com/gojuno/minimock (v3.4.2). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Danya97i/chat-server/internal/repository.LogRepository -o log_repository_minimock.go -n LogRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Danya97i/chat-server/internal/models"
	"github.com/gojuno/minimock/v3"
)

// LogRepositoryMock implements repository.LogRepository
type LogRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSave          func(ctx context.Context, logInfo models.LogInfo) (err error)
	inspectFuncSave   func(ctx context.Context, logInfo models.LogInfo)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mLogRepositoryMockSave
}

// NewLogRepositoryMock returns a mock for repository.LogRepository
func NewLogRepositoryMock(t minimock.Tester) *LogRepositoryMock {
	m := &LogRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SaveMock = mLogRepositoryMockSave{mock: m}
	m.SaveMock.callArgs = []*LogRepositoryMockSaveParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLogRepositoryMockSave struct {
	optional           bool
	mock               *LogRepositoryMock
	defaultExpectation *LogRepositoryMockSaveExpectation
	expectations       []*LogRepositoryMockSaveExpectation

	callArgs []*LogRepositoryMockSaveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LogRepositoryMockSaveExpectation specifies expectation struct of the LogRepository.Save
type LogRepositoryMockSaveExpectation struct {
	mock      *LogRepositoryMock
	params    *LogRepositoryMockSaveParams
	paramPtrs *LogRepositoryMockSaveParamPtrs
	results   *LogRepositoryMockSaveResults
	Counter   uint64
}

// LogRepositoryMockSaveParams contains parameters of the LogRepository.Save
type LogRepositoryMockSaveParams struct {
	ctx     context.Context
	logInfo models.LogInfo
}

// LogRepositoryMockSaveParamPtrs contains pointers to parameters of the LogRepository.Save
type LogRepositoryMockSaveParamPtrs struct {
	ctx     *context.Context
	logInfo *models.LogInfo
}

// LogRepositoryMockSaveResults contains results of the LogRepository.Save
type LogRepositoryMockSaveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSave *mLogRepositoryMockSave) Optional() *mLogRepositoryMockSave {
	mmSave.optional = true
	return mmSave
}

// Expect sets up expected params for LogRepository.Save
func (mmSave *mLogRepositoryMockSave) Expect(ctx context.Context, logInfo models.LogInfo) *mLogRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("LogRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &LogRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.paramPtrs != nil {
		mmSave.mock.t.Fatalf("LogRepositoryMock.Save mock is already set by ExpectParams functions")
	}

	mmSave.defaultExpectation.params = &LogRepositoryMockSaveParams{ctx, logInfo}
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// ExpectCtxParam1 sets up expected param ctx for LogRepository.Save
func (mmSave *mLogRepositoryMockSave) ExpectCtxParam1(ctx context.Context) *mLogRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("LogRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &LogRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("LogRepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &LogRepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSave
}

// ExpectLogInfoParam2 sets up expected param logInfo for LogRepository.Save
func (mmSave *mLogRepositoryMockSave) ExpectLogInfoParam2(logInfo models.LogInfo) *mLogRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("LogRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &LogRepositoryMockSaveExpectation{}
	}

	if mmSave.defaultExpectation.params != nil {
		mmSave.mock.t.Fatalf("LogRepositoryMock.Save mock is already set by Expect")
	}

	if mmSave.defaultExpectation.paramPtrs == nil {
		mmSave.defaultExpectation.paramPtrs = &LogRepositoryMockSaveParamPtrs{}
	}
	mmSave.defaultExpectation.paramPtrs.logInfo = &logInfo

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the LogRepository.Save
func (mmSave *mLogRepositoryMockSave) Inspect(f func(ctx context.Context, logInfo models.LogInfo)) *mLogRepositoryMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for LogRepositoryMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by LogRepository.Save
func (mmSave *mLogRepositoryMockSave) Return(err error) *LogRepositoryMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("LogRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &LogRepositoryMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &LogRepositoryMockSaveResults{err}
	return mmSave.mock
}

// Set uses given function f to mock the LogRepository.Save method
func (mmSave *mLogRepositoryMockSave) Set(f func(ctx context.Context, logInfo models.LogInfo) (err error)) *LogRepositoryMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the LogRepository.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the LogRepository.Save method")
	}

	mmSave.mock.funcSave = f
	return mmSave.mock
}

// When sets expectation for the LogRepository.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mLogRepositoryMockSave) When(ctx context.Context, logInfo models.LogInfo) *LogRepositoryMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("LogRepositoryMock.Save mock is already set by Set")
	}

	expectation := &LogRepositoryMockSaveExpectation{
		mock:   mmSave.mock,
		params: &LogRepositoryMockSaveParams{ctx, logInfo},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up LogRepository.Save return parameters for the expectation previously defined by the When method
func (e *LogRepositoryMockSaveExpectation) Then(err error) *LogRepositoryMock {
	e.results = &LogRepositoryMockSaveResults{err}
	return e.mock
}

// Times sets number of times LogRepository.Save should be invoked
func (mmSave *mLogRepositoryMockSave) Times(n uint64) *mLogRepositoryMockSave {
	if n == 0 {
		mmSave.mock.t.Fatalf("Times of LogRepositoryMock.Save mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSave.expectedInvocations, n)
	return mmSave
}

func (mmSave *mLogRepositoryMockSave) invocationsDone() bool {
	if len(mmSave.expectations) == 0 && mmSave.defaultExpectation == nil && mmSave.mock.funcSave == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSave.mock.afterSaveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSave.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Save implements repository.LogRepository
func (mmSave *LogRepositoryMock) Save(ctx context.Context, logInfo models.LogInfo) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, logInfo)
	}

	mm_params := LogRepositoryMockSaveParams{ctx, logInfo}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, &mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_want_ptrs := mmSave.SaveMock.defaultExpectation.paramPtrs

		mm_got := LogRepositoryMockSaveParams{ctx, logInfo}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSave.t.Errorf("LogRepositoryMock.Save got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.logInfo != nil && !minimock.Equal(*mm_want_ptrs.logInfo, mm_got.logInfo) {
				mmSave.t.Errorf("LogRepositoryMock.Save got unexpected parameter logInfo, want: %#v, got: %#v%s\n", *mm_want_ptrs.logInfo, mm_got.logInfo, minimock.Diff(*mm_want_ptrs.logInfo, mm_got.logInfo))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("LogRepositoryMock.Save got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the LogRepositoryMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, logInfo)
	}
	mmSave.t.Fatalf("Unexpected call to LogRepositoryMock.Save. %v %v", ctx, logInfo)
	return
}

// SaveAfterCounter returns a count of finished LogRepositoryMock.Save invocations
func (mmSave *LogRepositoryMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of LogRepositoryMock.Save invocations
func (mmSave *LogRepositoryMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to LogRepositoryMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mLogRepositoryMockSave) Calls() []*LogRepositoryMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*LogRepositoryMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *LogRepositoryMock) MinimockSaveDone() bool {
	if m.SaveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SaveMock.invocationsDone()
}

// MinimockSaveInspect logs each unmet expectation
func (m *LogRepositoryMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LogRepositoryMock.Save with params: %#v", *e.params)
		}
	}

	afterSaveCounter := mm_atomic.LoadUint64(&m.afterSaveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && afterSaveCounter < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LogRepositoryMock.Save")
		} else {
			m.t.Errorf("Expected call to LogRepositoryMock.Save with params: %#v", *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && afterSaveCounter < 1 {
		m.t.Error("Expected call to LogRepositoryMock.Save")
	}

	if !m.SaveMock.invocationsDone() && afterSaveCounter > 0 {
		m.t.Errorf("Expected %d calls to LogRepositoryMock.Save but found %d calls",
			mm_atomic.LoadUint64(&m.SaveMock.expectedInvocations), afterSaveCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LogRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSaveInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LogRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LogRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSaveDone()
}
